package azure

import (
	"context"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/storage/armstorage"
	"github.com/turbot/steampipe-plugin-sdk/v5/grpc/proto"
	"github.com/turbot/steampipe-plugin-sdk/v5/plugin"
	"github.com/turbot/steampipe-plugin-sdk/v5/plugin/transform"
)

//// TABLE DEFINITION

func tableAzureStorageAccountLocalUser(_ context.Context) *plugin.Table {
	return &plugin.Table{
		Name:        "azure_storage_account_local_user",
		Description: "Azure Storage Account Local User",
		Get: &plugin.GetConfig{
			KeyColumns: plugin.AllColumns([]string{"storage_account_name", "name", "resource_group"}),
			Hydrate:    getStorageAccountLocalUser,
			IgnoreConfig: &plugin.IgnoreConfig{
				ShouldIgnoreErrorFunc: isNotFoundError([]string{"ResourceNotFound", "ResourceGroupNotFound", "404"}),
			},
		},
		List: &plugin.ListConfig{
			ParentHydrate: listStorageAccounts,
			Hydrate:       listStorageAccountLocalUsers,
		},
		Columns: azureColumns([]*plugin.Column{
			{
				Name:        "name",
				Description: "The name of the local user.",
				Type:        proto.ColumnType_STRING,
			},
			{
				Name:        "id",
				Description: "The resource ID.",
				Type:        proto.ColumnType_STRING,
				Transform:   transform.FromGo(),
			},
			{
				Name:        "storage_account_name",
				Description: "The name of the storage account.",
				Type:        proto.ColumnType_STRING,
				Transform:   transform.From(extractStorageAccountNameFromLocalUserID),
			},
			{
				Name:        "type",
				Description: "The type of the resource.",
				Type:        proto.ColumnType_STRING,
			},
			{
				Name:        "has_ssh_key",
				Description: "Indicates whether ssh key exists.",
				Type:        proto.ColumnType_BOOL,
				Transform:   transform.FromField("Properties.HasSSHKey"),
			},
			{
				Name:        "has_ssh_password",
				Description: "Indicates whether ssh password exists.",
				Type:        proto.ColumnType_BOOL,
				Transform:   transform.FromField("Properties.HasSSHPassword"),
			},
			{
				Name:        "has_shared_key",
				Description: "Indicates whether shared key exists.",
				Type:        proto.ColumnType_BOOL,
				Transform:   transform.FromField("Properties.HasSharedKey"),
			},
			{
				Name:        "home_directory",
				Description: "Local user home directory.",
				Type:        proto.ColumnType_STRING,
				Transform:   transform.FromField("Properties.HomeDirectory"),
			},
			{
				Name:        "is_nfsv3_enabled",
				Description: "Indicates if the local user is enabled for access with NFSv3 protocol.",
				Type:        proto.ColumnType_BOOL,
				Transform:   transform.FromField("Properties.IsNFSv3Enabled"),
			},
			{
				Name:        "sid",
				Description: "A unique Security Identifier that is generated by the server.",
				Type:        proto.ColumnType_STRING,
				Transform:   transform.FromField("Properties.Sid"),
			},
			{
				Name:        "user_id",
				Description: "A unique Identifier that is generated by the server.",
				Type:        proto.ColumnType_INT,
				Transform:   transform.FromField("Properties.UserID"),
			},
			{
				Name:        "allow_acl_authorization",
				Description: "Indicates whether ACL authorization is allowed for this user.",
				Type:        proto.ColumnType_BOOL,
				Transform:   transform.FromField("Properties.AllowACLAuthorization"),
			},
			{
				Name:        "extended_groups",
				Description: "Supplementary group membership.",
				Type:        proto.ColumnType_JSON,
				Transform:   transform.FromField("Properties.ExtendedGroups"),
			},
			{
				Name:        "group_id",
				Description: "An identifier for associating a group of users.",
				Type:        proto.ColumnType_INT,
				Transform:   transform.FromField("Properties.GroupID"),
			},
			{
				Name:        "permission_scopes",
				Description: "The permission scopes of the local user.",
				Type:        proto.ColumnType_JSON,
				Transform:   transform.FromField("Properties.PermissionScopes"),
			},
			{
				Name:        "ssh_authorized_keys",
				Description: "Local user ssh authorized keys for SFTP.",
				Type:        proto.ColumnType_JSON,
				Transform:   transform.FromField("Properties.SSHAuthorizedKeys"),
			},

			// Steampipe standard columns
			{
				Name:        "title",
				Description: ColumnDescriptionTitle,
				Type:        proto.ColumnType_STRING,
				Transform:   transform.FromField("Name"),
			},
			{
				Name:        "akas",
				Description: ColumnDescriptionAkas,
				Type:        proto.ColumnType_JSON,
				Transform:   transform.FromField("ID").Transform(idToAkas),
			},

			// Azure standard columns
			{
				Name:        "resource_group",
				Description: ColumnDescriptionResourceGroup,
				Type:        proto.ColumnType_STRING,
				Transform:   transform.FromField("ID").Transform(extractResourceGroupFromID),
			},
		}),
	}
}

//// LIST FUNCTION

func listStorageAccountLocalUsers(ctx context.Context, d *plugin.QueryData, h *plugin.HydrateData) (interface{}, error) {
	// Get the storage account details from the parent hydrate
	storageAccount := h.Item.(*armstorage.Account)
	resourceGroup := ""
	if storageAccount.ID != nil {
		parts := strings.Split(*storageAccount.ID, "/")
		for i := 0; i < len(parts)-1; i++ {
			if strings.EqualFold(parts[i], "resourceGroups") {
				resourceGroup = parts[i+1]
				break
			}
		}
	}
	accountName := *storageAccount.Name

	session, err := GetNewSession(ctx, d, "MANAGEMENT")
	if err != nil {
		return nil, err
	}
	subscriptionID := session.SubscriptionID

	cred := session.Authorizer.(azcore.TokenCredential)

	client, err := armstorage.NewLocalUsersClient(subscriptionID, cred, nil)
	if err != nil {
		return nil, err
	}

	pager := client.NewListPager(resourceGroup, accountName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			return nil, err
		}

		for _, localUser := range nextResult.Value {
			d.StreamListItem(ctx, localUser)
		}
	}

	return nil, nil
}

//// HYDRATE FUNCTIONS

func getStorageAccountLocalUser(ctx context.Context, d *plugin.QueryData, h *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("getStorageAccountLocalUser")

	// Create session
	session, err := GetNewSession(ctx, d, "MANAGEMENT")
	if err != nil {
		return nil, err
	}
	subscriptionID := session.SubscriptionID

	name := d.EqualsQuals["name"].GetStringValue()
	resourceGroup := d.EqualsQuals["resource_group"].GetStringValue()
	storageAccountName := d.EqualsQuals["storage_account_name"].GetStringValue()

	// Return nil if any required field is missing
	if name == "" || resourceGroup == "" || storageAccountName == "" {
		return nil, nil
	}

	cred := session.Authorizer.(azcore.TokenCredential)

	client, err := armstorage.NewLocalUsersClient(subscriptionID, cred, nil)
	if err != nil {
		return nil, err
	}

	op, err := client.Get(ctx, resourceGroup, storageAccountName, name, nil)
	if err != nil {
		plugin.Logger(ctx).Error("getStorageAccountLocalUser", "get", err)
		return nil, err
	}

	return op.LocalUser, nil
}

//// TRANSFORM FUNCTIONS

func extractStorageAccountNameFromLocalUserID(ctx context.Context, d *transform.TransformData) (interface{}, error) {
	data := d.HydrateItem.(*armstorage.LocalUser)
	if data.ID == nil {
		return nil, nil
	}
	parts := strings.Split(*data.ID, "/")
	for i := 0; i < len(parts)-1; i++ {
		if strings.EqualFold(parts[i], "storageAccounts") {
			return parts[i+1], nil
		}
	}
	return nil, nil
}
